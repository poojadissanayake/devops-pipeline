name: CD - Deploy to Staging

on:
  workflow_run:
    workflows: ["CI - Build and Push all services"]
    types:
      - completed

jobs:
  deploy_all:
    if: ${{ github.event.workflow_run.conclusion == 'success'}}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout triggering commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ vars.AKS_CLUSTER_NAME }}

      - name: Deploy Backend Infrastructure (ConfigMaps, Secrets, Databases)
        run: |
          cd k8s
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f customer-db.yaml

      - name: Add Storage keys to ecommerce-secret
        shell: bash
        run: |
          set -e
          NS=default

          SA_NAME='${{ secrets.STORAGE_ACCOUNT_NAME }}'
          if [ -z "$SA_NAME" ]; then
            echo "STORAGE_ACCOUNT_NAME secret is not set." >&2
            exit 1
          fi

          RG='${{ vars.AKS_RESOURCE_GROUP }}'

          # get the storage account key
          SA_KEY=$(az storage account keys list -g "$RG" -n "$SA_NAME" --query "[0].value" -o tsv)
          if [ -z "$SA_KEY" ]; then
            echo "Failed to retrieve key for storage account '$SA_NAME' in RG '$RG'." >&2
            exit 1
          fi

          # patch the secret with storage account name and key
          kubectl -n "$NS" patch secret ecommerce-secret \
            --type merge \
            -p "{\"stringData\":{
              \"AZURE_STORAGE_ACCOUNT_NAME\":\"$SA_NAME\",
              \"AZURE_STORAGE_ACCOUNT_KEY\":\"$SA_KEY\"
            }}"

      - name: Deploy services
        run: |
          cd k8s
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
          kubectl apply -f customer-service.yaml
          kubectl apply -f frontend.yaml

      - name: Wait for frontend IP
        id: ip
        run: |
          for i in {1..60}; do
            EP=$(kubectl get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EP" ]; then
              echo "FRONTEND=http://$EP" >> $GITHUB_ENV
              exit 0
            fi
            echo "Waiting for frontend LB IP... ($i/60)"
            sleep 5
          done
          echo "Timeout waiting for frontend IP" >&2
          exit 1

      - name: Run smoke checks
        run: |
          set -e
          echo "Testing frontend at $FRONTEND"
          curl -fsS "$FRONTEND/api/products/"   | head -c 200
          curl -fsS "$FRONTEND/api/orders/"     | head -c 200
          curl -fsS "$FRONTEND/api/customers/"  | head -c 200

      - name: Install Node.js for playwright tests
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: .
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Install Playwright Browsers
        working-directory: .
        run: npx playwright install --with-deps

      - name: Run Playwright tests on staging
        working-directory: .
        env:
          BASE_URL: ${{ env.FRONTEND }}
        run: npx playwright test --reporter=html

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
